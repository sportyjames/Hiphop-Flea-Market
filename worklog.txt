1. get started with react 
- create react app 
- create header and footer component using react bootstrap to style 
- style using react bootstrap, and bootstrap theme from Bootswatch
- within index.js, import the bootswatch 
- within App.js, import react bootstrap
- header, fonter, import react bootstrap
- index.css
    - make the fonter to bottom
        - main: min height 80vh
- style header
    - add react bootstrap navbar to header 
- add fontawesome to add icons 
    - font-awesome 

2. build the home page 
- output product data into home page 
- create product component
- create rating component
- style components

3. Implement react router 
- npm i react-router-dom react-router-bootstrap
- in App.js, import react-router-dom
- use the router to wrap the header component
- now can set different routes 
    - we can place this component with the route instead 
- add home route
    - exact only for home page 
- add product route 
    - :id
- use Link from react-router-dom
- now there will not be reloading on the page 
- also Link it for header and footer 
    - use LinkContainer from react-router-bootstrap

4. Product Screen Page 
- p._id == match.params.id
    - id will be get from the url 

Backend Overview 
- we do not want static data, we want real data 
- front end and backend separate 
- front end send get request, backend query from db, serialize data and return back to front end 
- restful api 
- when building for production
    - turn the entire react project to static file set 
    - so we call command run build, turn react to static 
    - add static file to django, django will serve our react project 

Build the backend
- setup django restful 
- frontend make call to django 
- create real database and render real data 

Setup virtual env 
- let us to keep all the import within one env rather than global 
- pip list check all the dependency 
- virtualenv myenv 
- activate myenv
    - source myenv/bin/activate
- pip install django 
- django-admin startproject backend

Start server 
- python manage.py runserver

Django
- normally u seperate project into different apps 
- in this case, create one app because we just want one API 
- python manage.py startapp base

Django stuff
- we gonna work with views.py, where we gonna handle business logic 
- model.py, where we create our dbs 
- we need to tell our project about our app 
    - base.apps.BaseConfig
- views.py 
    - create getRoutes
        - setup how to trigger the this view
- create urls.py inside base
- tell urls.py inside django about the urls.py inside base 
- setup api routes 

Install Django restful framework 
- pip install djangorestframework
- goto settings
- work with rest_framework.decorators and response 

Create api for specific product:
- getProduct

Connect front end to backend (Important to know)
- install axios 
- goto homescreen
    - import axios 
    - import useState and useEffect 
    - define product state 
        - originally empty 
    - define useEffect 
        - make it trigger when component first loads, so second arg is []
        - write axios code inside useEffect 
        - make it async 
        - when it is called, the state changes
    - We got CORS error 
        - Django does not allow the call, so we need to configure 
        - pip install django-cors-headers
        - goto settings.py
            - add corsheaders 
            - add middleware
            - use CORS_ALLOW_ALL_ORIGINS=True
            - now should work 
- go back to package.json and setup proxy
- goto productscreen 

Database structure (important)
- use postgre not sqlite
- migration:
    - purpose: build out the tables and set up our first database. Once make more changes, then we can make migrations again and Django will update our dbs 
    - command: python manage.py migrate
- models.py
    - where we gonna use it to build our db tables 

- structure
    - Django provide user model
    - User one to many relationship to Product cuz user can create multiple product 
    - Product have multiple reviews 
    - User can write multiple reviews on different products
    - user can build out an order(shopping cart)
    - inside the cart, we can build out order items 
    - order items need to connect to product 
    - order need a shipping address

- create user 
    - python manage.py createsuperuser
    - we can do it cuz we applied our migrations



- work with product model 
    - import user model 
    - user
        - foreign key
        - set on_delete value so that when user who create the product is deleted, do not delete the product
    - name
    - ...
    - make migrations 
        - python manage.py makemigrations
    - run migrations 
        -  python manage.py migrate

- register the product table with admin panel 
    - admin.py
        - from .models import Product
        - admin.site.register(Product)
    - create str function to turn the object to str 

- work with Review model

- work with order model

- work with orderitem model 

- work with shippingaddress model 

- create migrate and run migration

- Product image field
    - pip install pillow 
    - run migrations 

- create a static folder to store images 
    - create css subfolder
    - create js folder
    - create images folder 
    - goto settings.py to configure the static folder
        - STATICFILES_DIRS
        - MEDIA_ROOT = 'static/images'

Set the media urls
    - goto settings.py 
        - MEDIA_URL = '/images/'
    - goto urls.py
        - from django.conf import settings 
        - urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) 

Now we want to make queries to db 
- import models in views.py 
- serialize the data from db 
    - create a serializer for every single model we want to return 
        - it is gonna wrap our model and turn that into JSON format 
    - return serialized data 
- Now we see the real data from backend instead of hard code front end data


Redux:
- two kinds of state:
    - component states
        - has to do with specific component 
        - e.g. dropdown menu, slider 
        - menu open or close depending on the component state 
    - global states
        - what redux is for 
        - e.g. products 
        - we might access/add/update/delete product 
        - so we want it available to all components 
    - reducers functions
        - change states 
        - accept actions 
        - responsible for manipulating and passing the state down to components 
    - actions
        - objects that represent the intention to change a piece of state 
    - action creators:
        - functions that will dispatch those actions 
    - Example: 
        - we may have an action creator function called getProduct
        - in the action creator, we make a fetch request to the backend 
        to get data using axios and we get data back and dispatch an action
        to reducer and attach payload to it. The payload will have the fetched 
        data
        - Now in the reducer, we can assign that payload data to the state and we 
        can pass it down to any components that ask for it. 
        - think of state as a cloud hovering over app, when we need sth to happen,
        we click a button and fetch some data from the server and then display it.
        We have to create an action or an action creator to dispatch specific action 
        to reducer then the reducer pass it down to component

Install redux dev tool
- let us to see the entire state/stores/different actions that are firing off in our browser 
- it is gonna make working with our store a lot easier 

Make some install 
- redux react-redux redux-thunk redux-devtools-extension
- redux-thunk allow async request from actioncreator
- redux-devtools-extension: allow us to connect store to the browser extension
 
Create our store  
- create store.js 
- import libraries 
    - createStore: create our store
    - combineReducers: combine reducers into one reducer and apply it to our store 
    - thunk 
    - devtools
- create store
    - parameter
        - reducer 
        - initialState
        - composewithdevtools

Export store  
- import to index.js 
- wrap our entire store with provider
    - provider will make the store available to the entire app 

Create Product list actions&reducers
- goto front-end src 
    - create a folder for reducers
- reducers
    - reducer is a function which basically take in current state and an action of what we want to do with the state. 
    - manipulate the state with the action 
    - return a new copy state to store 
        - create productReducers.js
            - create productlistReducers
                - check action.type
                    - request case, still loading data
                    - success case, data returned, not laoding anymore, update products with payload
                    - fail case, update product with failed response
                    - default value, return initial state
                - export productlistReducer to store.js 
                - this reducer has added value to the state. iniital state is {}. Cuz we trigger reducer, we set products to initial state.
                By using combinedReducer, we trigger the first call of that reducer. The reducer update the state
                - use constant for the switch case
                    - so easier to maintain 
        - add some actions to the reducer, load some data
            - create action folder
                - create productActions.js
                    - create listProducts function
                        - this replace the api call we make in the home screen 
                        - once we get the list data, we gonna dispatch our product reducer, where throw in action type and the reducer will update the state 
                        - redux thunk allow us to create funciton within a function 
                        - we pass in dispatch
                            - dispatch is where we gonna use to dispatch those actions(Product constants) 
                        - dispatch all the actions in order 
                            - dispatch request
                            - make api call and load up data
                            - if success 
                                - dispatch success
                            - else 
                                - catch the error and dispatch fail 
         
Bring Redux into home screen 
- use those actions within our components to fire off those 
actions and update our redux store 
- get rid of local state, stuff inside useEffect
- import useDispatch to fire off actions 
- import useSelector to select certain parts of our states/redux store 
    - e.g. we want to access productList state from the redux store, later on there will be more states in redux store to select.
- fire off our first action 
    - import the listProduct action first 
    - call dispatch inside useEffect 
    - the store is gonna be updated 
- now we can see data within productList 
    - these are data from database, we are now loading it into redux !!! 
    - we can see actions fired off from inspector 
- now we gonna take the data inside productList and render it on homescreen 
    - we will use useSelector
        - inside useSelector, get productList 
        - destruct productList into error, loading, products
- create a loading message whenever the data is being pulled in and then render out an error message 
- pass dispatch into useEffect

Message & Loader Component 
- use react bootstrap component 
- Loader.js 
- Message.js 

Product Details Reducers & action
- load all the product detail data from redux store instead of from component level state 
- new actions, constants, and reducers 
- Create constants 
- Create Reducers 
- Create actions 
    - update that state and then call it within our component here 


Quality select & add to cart 
- set Qty state 

Card Reducer & Action 
- create constants 
- create reducers 
- create storage 

- load the data into local storage 
- when somebody goes shopping on website, they can add some items to a cart, leave our webiste, and then come back and still see those items in their cart without ever having to create an account
- goto store to get the data from local storage 
- load the data to initial state 

Add To Cart Functionality 

Cart Screen
            
Remove items from cart 

Using JSON Web tokens to handle authorization 
-  we do not want customer update our products 
- so JSON Web token is used 
- it is just encoded data bout the user 
- create a route 
    - type username password 
    - get back user info along with tokens
    - after decoded, we can see expiration date, user_id, token_type
- add the token to local storage
- token is here as long as user is logged in 

POSTMAN
- later on, we gonna send our JSON Web token thru our headers 

JSON Web Token installment and setup 
- due to restful framework, we have to handle our authentication a little differently than normal django app 
- use Simple JWT token 
- django-rest-framework-simplejwt
    - pip install djangorestframework-simplejwt
- add rest_framework 
- api/user/login
    - if I hit post, it is gonna generate a token for me. 
    - store the access token inside local storage 
    - send the token to protect routes, any route that require authentication 
    - this token is gonna authenticate user for us 
- we can customize the token expiration date 
    - the token is gonna expire in 30 days 

JWT customization 
- how to encode more data with token 

Create User serializer 
- get back some user data in our API 
- create a url path for a single user object
- getUserProfile
    - cuz using rest API, we are using token based authentication 
    - serialize the user 
        - we send get request with authorization token and get back user info
            - what happened here is we sent this token, this authorization token, 
            then because of the way we customize things with JSON Web token, and we 
            configure authentication class to use JSON Web Token. When we send that, 
            this view gets that token and now we have access to request.user based on 
            what is inside the token.

Create another User serializer 
- do the exact same thing that our current serializer does
- except for this time it's going to generate a refresh token 
- we are gonna need this for situations when we first register
when a user reset their account information, we need a new token
to represent the new user information
- as we are generating or serializing a user, we are going to
take that user object and return back another token with the 
initial response 
- in the front end, we actually gonna have two tokens when we 
first register

Protected Routes 
- userProfile
    - add another decorator and set permission level 
- two permission level
    1. for a user to be authenticated 
    2. user must be an admin 
- set some staff permission classes 

Register User 
- use UserSerializerWithToken
    - when we register user, we want to return the token right away
- when we get back token after sending the post request 
    - This is how we gonna log in a user right away in the front end 
- try catch prevent duplicated user 

Login with email 
- 






